HTML5


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Chunked File Upload</title>
    <script>
        // Function to upload a file in chunks
        function uploadFileInChunks(file) {
            const chunkSize = 1024 * 1024; // 1 MB chunk size
            const totalChunks = Math.ceil(file.size / chunkSize);

            let currentChunk = 0;

            function uploadChunk() {
                if (currentChunk >= totalChunks) {
                    console.log('Upload complete');
                    return;
                }

                const start = currentChunk * chunkSize;
                const end = Math.min(start + chunkSize, file.size);

                const chunk = file.slice(start, end);
                const formData = new FormData();
                formData.append('file', chunk);
                formData.append('chunk', currentChunk);
                formData.append('totalChunks', totalChunks);

                fetch('/upload-chunk', {
                    method: 'POST',
                    body: formData,
                })
                .then(response => {
                    if (response.ok) {
                        console.log(`Chunk ${currentChunk} uploaded`);
                        currentChunk++;
                        uploadChunk(); // Upload the next chunk
                    } else {
                        console.error(`Error uploading chunk ${currentChunk}`);
                    }
                });
            }

            uploadChunk(); // Start uploading the first chunk
        }

        document.addEventListener('DOMContentLoaded', () => {
            const fileInput = document.getElementById('file');
            fileInput.addEventListener('change', (event) => {
                const file = event.target.files[0];
                if (file) {
                    uploadFileInChunks(file); // Start uploading the file in chunks
                }
            });
        });
    </script>
</head>
<body>
    <h1>Chunked File Upload</h1>
    <label for="file">Choose a file:</label>
    <input type="file" id="file" name="file" required>
</body>
</html>



Golang


package main

import (
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strconv"
)

const uploadDir = "./uploads/" // Directory where uploaded files are stored

func uploadChunkHandler(w http.ResponseWriter, r *http.Request) {
	// Ensure the request method is POST
	if r.Method != http.MethodPost {
		http.Error(w, "Only POST requests are allowed", http.StatusMethodNotAllowed)
		return;
	}

	// Get file from the request
	file, _, err := r.FormFile("file")
	if err != nil {
		http.Error(w, "Failed to retrieve file", http.StatusInternalServerError)
		return;
	}
	defer file.Close()

	// Get the chunk number and total chunks from the request
	chunk, err := strconv.Atoi(r.FormValue("chunk"))
	if err != nil {
		http.Error(w, "Invalid chunk number", http.StatusBadRequest)
		return;
	}
	totalChunks, err := strconv.Atoi(r.FormValue("totalChunks"))
	if err != nil {
		http.Error(w, "Invalid total chunks", http.StatusBadRequest)
		return;
	}

	// Create a temporary file for storing the chunk
	chunkFileName := fmt.Sprintf("%sfile_chunk_%d", uploadDir, chunk)
	chunkFile, err := os.Create(chunkFileName)
	if err != nil {
		http.Error(w, "Failed to create chunk file", http.StatusInternalServerError)
		return;
	}
	defer chunkFile.Close()

	// Write the uploaded chunk to the temporary file
	_, err = io.Copy(chunkFile, file)
	if err != nil {
		http.Error(w, "Failed to write chunk to file", http.StatusInternalServerError)
		return;
	}

	// If this is the last chunk, reassemble the file
	if chunk == totalChunks-1 {
		finalFile, err := os.Create(uploadDir + "final_file")
		if err != nil {
			http.Error(w, "Failed to create final file", http.StatusInternalServerError)
			return;
		}
		defer finalFile.Close()

		// Reassemble the chunks into the final file
		for i := 0; i < totalChunks; i++ {
			chunkFileName := fmt.Sprintf("%sfile_chunk_%d", uploadDir, i)
			chunkFile, err := os.Open(chunkFileName)
			if err != nil {
				http.Error(w, "Failed to open chunk file", http.StatusInternalServerError)
				return;
			}
			_, err = io.Copy(finalFile, chunkFile)
			chunkFile.Close()
			os.Remove(chunkFileName) // Delete the chunk file after reassembly
		}
	}

	w.WriteHeader(http.StatusOK)
	fmt.Fprintf(w, "Chunk %d uploaded successfully", chunk)
}

func main() {
	// Ensure the upload directory exists
	err := os.MkdirAll(uploadDir, 0755)
	if err != nil {
		log.Fatal("Failed to create upload directory:", err)
	}

	http.HandleFunc("/upload-chunk", uploadChunkHandler)
	fmt.Println("Server is listening on http://localhost:8080")
	log.Fatal(http.ListenAndServe(":8080", nil))
}
